//---------------------------------------------------------------------------

#include <vcl.h>
#pragma hdrstop

#include "uMain.h"
//---------------------------------------------------------------------------
#pragma package(smart_init)
#pragma resource "*.dfm"
TfrmMain *frmMain;
Component component_array[100];
static int component_array_pos = 0;
int comp_width = 20, comp_height = 50, wire_length = 10, grid_width = 10;
std::string current_component = "";
//---------------------------------------------------------------------------
__fastcall TfrmMain::TfrmMain(TComponent* Owner)
	: TForm(Owner)
{
}

bool valid_place(int x0, int y0){
	bool res = true;
	for (int i = 0; i < component_array_pos; i++) {
		int x, y;
		x = component_array[i].get_x();
		y = component_array[i].get_y();
		if ((x0 >= x - wire_length && x0 <= x + comp_width + 2 * wire_length && y0 >= y && y0 <= y + comp_height) ||
			(x0 + comp_width >= x - wire_length && x0 + comp_width <= x + comp_width + 2 * wire_length && y0 >= y && y0 <= y + comp_height) ||
			(x0 >= x - wire_length && x0 <= x + comp_width + 2 * wire_length && y0 + comp_height >= y && y0 + comp_height <= y + comp_height) ||
			(x0 + comp_width >= x - wire_length && x0 + comp_width <= x + comp_width + 2 * wire_length && y0 + comp_height >= y && y0 + comp_height <= y + comp_height)){
			res = false;
		}
	}
	return res;
}

void draw_grid(TPaintBox *pb){
	pb -> Canvas -> Pen -> Color = clBtnFace;
	int x_line = 0, y_line = 0;
	for (int i = 0; i < (int)pb->Width / grid_width; i++) {
		pb -> Canvas -> MoveTo(x_line, 0);
		pb -> Canvas -> LineTo(x_line, pb->Height);
		x_line += grid_width;
	}
	for (int i = 0; i < (int)pb->Height / grid_width; i++) {
		pb -> Canvas -> MoveTo(0, y_line);
		pb -> Canvas -> LineTo(pb -> Width, y_line);
		y_line += grid_width;
	}
	pb -> Canvas -> Pen -> Color = clBlack;
}

void round_coords(int* X, int* Y){
	while (!(*X % grid_width == 0))
		(*X)--;
	while (!(*Y % grid_width == 0))
		(*Y)--;
	if (!valid_place(*X, *Y)) {
		(*X) += grid_width;
	}
	else
		return;
	if (!valid_place(*X, *Y)) {
		(*X) += grid_width;
	}
	else
		return;
	if (!valid_place(*X, *Y)) {
		(*Y) += 2 * grid_width;
	}
	else
		return;
}

std::string fetch_component_name(std::string src){
	std::string res = "";
	int i = 0;
	while (!(src[i] >= '0' && src[i] <= '9'))
		res.push_back(src[i++]);
	return res;
}

void add_component(int X, int Y){
	Component entity;
	if (!(current_component == "not")) {
		entity.set_type(fetch_component_name(current_component));
		entity.set_entry_amount(current_component[current_component.length() - 1] - '0');
	}
	else{
		entity.set_type("not");
        entity.set_entry_amount(1);
    }
	entity.set_coords(X, Y);
	component_array[component_array_pos++] = entity;
}
//---------------------------------------------------------------------------
void __fastcall TfrmMain::pbMainMouseDown(TObject *Sender, TMouseButton Button, TShiftState Shift,
		  int X, int Y)
{
	if (!(current_component == "")) {
		round_coords(&X, &Y);
		if (valid_place(X, Y)) {
			add_component(X, Y);
		}
	}
	pbMain -> Invalidate();
}
//---------------------------------------------------------------------------
void __fastcall TfrmMain::btnDbgClick(TObject *Sender)
{
	memoDbg->Lines->Clear();
	for (int i = 0; i < component_array_pos; i++) {
		memoDbg->Lines->Add(component_array[i].get_type().c_str());
		memoDbg->Lines->Add(component_array[i].get_entry_amount());
	}
}
//---------------------------------------------------------------------------

void __fastcall TfrmMain::pbMainPaint(TObject *Sender)
{
	draw_grid(pbMain);
	pbMain -> Font -> Size = 8;
	for (int i = 0; i < component_array_pos; i++) {
		int X, Y;
		X = component_array[i].get_x();
		Y = component_array[i].get_y();
		pbMain -> Canvas -> Rectangle(X, Y, X + comp_width, Y + comp_height);
		std::string comp_type = component_array[i].get_type();

		if (comp_type == "not") {
			pbMain -> Canvas -> MoveTo(X, Y + (int)comp_height / 2);
			pbMain -> Canvas -> LineTo(X - wire_length, Y + (int)comp_height / 2);
		}
		else{
			//memoDbg -> Lines -> Add(component_array[i].get_type().c_str());
			pbMain -> Canvas -> MoveTo(X, Y + (int)comp_height / 3);
			pbMain -> Canvas -> LineTo(X - wire_length, Y + (int)comp_height / 3);
			pbMain -> Canvas -> MoveTo(X, Y + (int)2 * comp_height / 3);
			pbMain -> Canvas -> LineTo(X - wire_length, Y + (int)2 * comp_height / 3);
		}
		pbMain -> Canvas -> MoveTo(X + comp_width, Y + (int)comp_height / 2);
		pbMain -> Canvas -> LineTo(X + comp_width + wire_length, Y + (int)comp_height / 2);

		if (comp_type == "and" || comp_type == "nand") {
			pbMain -> Canvas -> TextOut(X + 6, Y + 5, "&");
		}
		else if (comp_type == "or" || comp_type == "nor") {
				pbMain -> Canvas -> TextOut(X + 7, Y + 5, "1");
			 }
			 else if (comp_type == "xor" || comp_type == "nxor") {
					pbMain -> Canvas -> TextOut(X + 2, Y + 5, "=1");
				  }
		if (comp_type[0] == 'n') {
			pbMain -> Canvas -> Ellipse(X + comp_width - 3, (int)Y + comp_height / 2 - 3, X + comp_width + 3, (int)Y + comp_height / 2 + 3);
		}
	}
}
//---------------------------------------------------------------------------

void __fastcall TfrmMain::FormCreate(TObject *Sender)
{
	pbMain -> Invalidate();
}
//---------------------------------------------------------------------------

void __fastcall TfrmMain::lboxComponentsDblClick(TObject *Sender)
{
	current_component = AnsiString(lboxComponents -> Items -> Strings[lboxComponents -> ItemIndex]).c_str();
}
//---------------------------------------------------------------------------

